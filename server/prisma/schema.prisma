generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement()) @map("user_id")
  cognitoId     String    @unique @map("cognito_id")
  username      String    @unique
  email         String    @unique
  firstName     String    @map("first_name")
  lastName      String?   @map("last_name")
  profilePicUrl String?   @map("profile_pic_url")
  createdAt     DateTime  @default(now()) @map("created_at")
  lastLogin     DateTime? @map("last_login")

  leagues     League[]
  leagueUsers UserLeague[]

  @@map("users")
}

model League {
  id            Int      @id @default(autoincrement()) @map("league_id")
  name          String
  description   String?
  competitionId Int      @map("competition_id")
  isPrivate     Boolean  @default(false) @map("is_private")
  createdById   Int      @map("created_by_id")
  createdAt     DateTime @default(now()) @map("created_at")

  competition Competition  @relation(fields: [competitionId], references: [id])
  creator     User         @relation(fields: [createdById], references: [id])
  users       UserLeague[]

  @@map("league")
}

model UserLeague {
  id       Int      @id @default(autoincrement()) @map("user_league_id")
  userId   Int      @map("user_id")
  leagueId Int      @map("league_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  user                   User                    @relation(fields: [userId], references: [id])
  league                 League                  @relation(fields: [leagueId], references: [id])
  matchPredictions       MatchPrediction[]
  competitionPredictions CompetitionPrediction[]
  points                 Point[]

  @@map("user_league")
}

model Competition {
  id             Int      @id @default(autoincrement()) @map("competition_id")
  name           String
  description    String?
  createdAt      DateTime @default(now()) @map("created_at")
  hasWinningTeam Boolean  @default(true) @map("has_winning_team")
  hasTopTries    Boolean  @default(true) @map("has_top_tries")
  hasTopPoints   Boolean  @default(true) @map("has_top_points")

  leagues                League[]
  matches                Match[]
  competitionPredictions CompetitionPrediction[]

  @@map("competition")
}

model Match {
  id            Int      @id @default(autoincrement()) @map("match_id")
  competitionId Int      @map("competition_id")
  homeTeamId    Int      @map("home_team_id")
  awayTeamId    Int      @map("away_team_id")
  stadiumId     Int?
  matchDate     DateTime @map("match_date")

  homeTeam    Team        @relation("homeTeamRelation", fields: [homeTeamId], references: [id])
  awayTeam    Team        @relation("awayTeamRelation", fields: [awayTeamId], references: [id])
  competition Competition @relation(fields: [competitionId], references: [id])

  matchPredictions MatchPrediction[]
  matchResults     MatchResult[]
  Stadium          Stadium?          @relation(fields: [stadiumId], references: [id])

  @@map("match")
}

model MatchResult {
  id              Int      @id @default(autoincrement()) @map("match_result_id")
  matchId         Int      @map("match_id")
  homeTeamScore   Int?
  awayTeamScore   Int?
  pointDifference Int?     @map("point_difference")
  winnerTeamId    Int?
  createdAt       DateTime @default(now()) @map("created_at")
  lastUpdated     DateTime @updatedAt @map("last_updated")

  match Match @relation(fields: [matchId], references: [id])

  @@map("match_result")
}

model Stadium {
  id     Int    @id @default(autoincrement()) @map("stadium_id")
  name   String
  cityId Int    @map("city_id")
  teamId Int    @map("team_id")

  city    City    @relation("CityStadiums", fields: [cityId], references: [id])
  team    Team    @relation(fields: [teamId], references: [id])
  matches Match[]

  @@map("stadium")
}

model Country {
  id   Int    @id @default(autoincrement()) @map("country_id")
  name String @unique

  cities City[]

  @@map("country")
}

model City {
  id        Int    @id @default(autoincrement()) @map("city_id")
  name      String
  countryId Int    @map("country_id")

  country  Country   @relation(fields: [countryId], references: [id])
  stadiums Stadium[] @relation("CityStadiums")

  @@map("city")
}

model Team {
  id   Int    @id @default(autoincrement()) @map("team_id")
  name String @unique

  homeMatches Match[]   @relation("homeTeamRelation")
  awayMatches Match[]   @relation("awayTeamRelation")
  players     Player[]
  Stadium     Stadium[]

  @@map("team")
}

model Player {
  id         Int    @id @default(autoincrement())
  name       String
  teamId     Int    @map("team_id")
  positionId Int    @map("position_id")

  team             Team              @relation(fields: [teamId], references: [id])
  matchPredictions MatchPrediction[]

  topTryScorerCompetitionPredictions    CompetitionPrediction[] @relation("TopTryScorerRelation")
  topPointsScorerCompetitionPredictions CompetitionPrediction[] @relation("TopPointsScorerRelation")
  position                              Position                @relation(fields: [positionId], references: [id])

  @@map("player")
}

model Position {
  id   Int    @id @default(autoincrement()) @map("position_id")
  name String @unique

  players Player[]

  @@map("position")
}

model MatchPrediction {
  id                        Int      @id @default(autoincrement()) @map("match_prediction_id")
  userLeagueId              Int      @map("user_league_id")
  matchId                   Int      @map("match_id")
  createdAt                 DateTime @default(now()) @map("created_at")
  predictedHomeScore        Int?     @map("predicted_home_score")
  predictedAwayScore        Int?     @map("predicted_away_score")
  predictedPointsDifference Int?     @map("predicted_points_difference")
  firstTryScorerId          Int?     @map("first_try_scorer_id")

  userLeague     UserLeague @relation(fields: [userLeagueId], references: [id])
  match          Match      @relation(fields: [matchId], references: [id])
  firstTryScorer Player?    @relation(fields: [firstTryScorerId], references: [id])

  @@map("match_prediction")
}

model CompetitionPrediction {
  id                Int      @id @default(autoincrement()) @map("competition_prediction_id")
  userLeagueId      Int      @map("user_league_id")
  competitionId     Int      @map("competition_id")
  createdAt         DateTime @default(now()) @map("created_at")
  predictedWinnerId Int?     @map("predicted_winner_id")
  topTryScorerId    Int?     @map("top_try_scorer_id")
  topPointsScorerId Int?     @map("top_points_scorer_id")

  userLeague      UserLeague  @relation(fields: [userLeagueId], references: [id])
  competition     Competition @relation(fields: [competitionId], references: [id])
  topTryScorer    Player?     @relation("TopTryScorerRelation", fields: [topTryScorerId], references: [id])
  topPointsScorer Player?     @relation("TopPointsScorerRelation", fields: [topPointsScorerId], references: [id])

  @@map("competition_prediction")
}

model Point {
  id           Int      @id @default(autoincrement()) @map("points_id")
  userLeagueId Int      @map("user_league_id")
  points       Int
  createdAt    DateTime @default(now()) @map("created_at")

  userLeague UserLeague @relation(fields: [userLeagueId], references: [id])

  @@map("point")
}
